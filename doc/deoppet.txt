*deoppet.txt*	Dark powered neo-snippet plugin for neovim/Vim8.

Version: 0.0
Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*deoppet-contents*

Introduction		|deoppet-introduction|
Install			|deoppet-install|
Interface		|deoppet-interface|
  Functions		  |deoppet-functions|
  Key mappings		  |deoppet-key-mappings|
  Options		  |deoppet-options|
Examples		|deoppet-examples|
FAQ			|deoppet-faq|
Compatibility		|deoppet-compatibility|

==============================================================================
INTRODUCTION						*deoppet-introduction*

*deoppet* is the abbreviation of "dark powered neo-snippet".

==============================================================================
INSTALL							*deoppet-install*

Note: deoppet requires Neovim 0.5.0+ with Python3.6.1+.

1. Extract the files and put them in your Neovim or .vim directory
   (usually `$XDG_CONFIG_HOME/nvim/`).
2. Execute the ":UpdateRemotePlugins" if Neovim.

If ":echo has('python3')" returns `1`, then you're done; otherwise, see below.

You can enable Python3 interface with pip: >

    pip3 install --user pynvim

Note: deoppet needs pynvim ver.0.1.8+.  You need update pynvim module.
>
    pip3 install --user --upgrade pynvim
<
You can check the Python3 installation by |:checkhealth| command in neovim.

==============================================================================
INTERFACE						*deoppet-interface*

------------------------------------------------------------------------------
FUNCTIONS 						*deoppet-functions*

							*deoppet#initialize()*
deoppet#initialize()
		Initialize deoppet plugin.
		Note: You need to call the function before use deoppet plugin.

						*deoppet#custom#option()*
deoppet#custom#option({option-name}, {value})
deoppet#custom#option({dict})
		Set {option-name} option to {value} in {buffer-name}
		buffer.
		If {dict} is available, the key is {option-name} and the value
		is {value}.
                Note: The all options are in |deoppet-options|.

							*deoppet#expandable()*
deoppet#expandable()
		It checks if the cursor text is a snippet trigger.
		Note: You should use it with imap <expr>.

------------------------------------------------------------------------------
KEY MAPPINGS 						*deoppet-key-mappings*

					*x_<Plug>(deoppet_cut_text)*
x_<Plug>(deoppet_cut_text)
		Cut the selected text for "TARGET" placeholder.

						*i_<Plug>(deoppet_expand)*
i_<Plug>(deoppet_expand)
		Expand a snippet in current cursor position. It only takes
		effect if there is a snippet text to expand.

					*i_<Plug>(deoppet_jump_backward)*
					*s_<Plug>(deoppet_jump_backward)*
i_<Plug>(deoppet_jump_backward)
s_<Plug>(deoppet_jump_backward)
		Jump to the previous placeholder key. It does not expand any
		snippets.

					*i_<Plug>(deoppet_jump_forward)*
					*s_<Plug>(deoppet_jump_forward)*
i_<Plug>(deoppet_jump_forward)
s_<Plug>(deoppet_jump_forward)
		Jump to the next placeholder key. It does not expand any
		snippets.

					*x_<Plug>(deoppet_select_text)*
x_<Plug>(deoppet_select_text)
		Select the selected text for "TARGET" placeholder.

------------------------------------------------------------------------------
OPTIONS							*deoppet-options*

					*deoppet-options-ft_snippets_map*
ft_snippets_map
		From Filetype to snippets mappings.
		You can extend `javascript` filetype with `typescript`
		filetype.
>
	call deoppet#custom#option('ft_snippets_map',
	\ {'typescript': ['typescript', 'javascript']})
<
		Default: {}

						*deoppet-options-snippets*
snippets
		Snippets directory information dictionaries list.

		Note: deoppet does not include any of default snippets.
		To load snippets, you need to set the option.

		Snippets dictionary has following keys:

			path		(String)	(Required)
				The snippets directory path.
				Note: It must be full path.

		Default: []

==============================================================================
EXAMPLES						*deoppet-examples*
>
	imap <C-k>  <Plug>(deoppet_expand)
	imap <expr><Tab>  deoppet#expandable() ?
	\ "\<Plug>(deoppet_expand)" : "\<Tab>"
	imap <C-f>  <Plug>(deoppet_jump_forward)
	imap <C-b>  <Plug>(deoppet_jump_backward)
	xmap <C-l>  <Plug>(deoppet_select_text)
	xmap <C-x>  <Plug>(deoppet_cut_text)

	call deoppet#initialize()
	call deoppet#custom#option('snippets',
		\ map(globpath(&runtimepath, 'neosnippets', 1, 1),
		\     { _, val -> { 'path': val } }))
<
==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*deoppet-faq*

Q: I want to capture group in snippet.
https://github.com/Shougo/neosnippet.vim/issues/426

A: Please use "g:deoppet#captures" variable for it.
>
	snippet    .map
	options     word
	regexp     '\(\w\+\)s\.map$'
	    .map(`g:deoppet#captures[1]` => ${0})

<
==============================================================================
COMPATIBILITY					*deoppet-compatibility*

2020.04.10
* Replace "snippets_dirs" option to "snippets" to expand it in the future.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
